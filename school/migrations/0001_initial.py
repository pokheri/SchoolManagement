# Generated by Django 5.1.7 on 2025-07-25 05:23

import django.db.models.deletion
import school.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractTimeTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acadmic_year', models.TextField(max_length=20)),
                ('weekday', models.CharField(choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday')], max_length=3)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('room', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'ordering': ['weekday', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Examination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=5, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExamTimeTable',
            fields=[
                ('abstracttimetable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school.abstracttimetable')),
            ],
            bases=('school.abstracttimetable',),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('title', models.CharField(max_length=50)),
                ('assignment_file', models.FileField(upload_to=school.models.Assignment.assignment_upload_path)),
                ('message', models.TextField(blank=True, null=True)),
                ('last_date_sub', models.DateTimeField()),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'T'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('file', models.FileField(upload_to=school.models.AssignmentSubmission.assignment_upload_path)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='school.assignment')),
                ('student', models.ForeignKey(limit_choices_to={'role': 'ST'}, on_delete=django.db.models.deletion.CASCADE, related_name='my_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('status', models.TextField(choices=[('A', 'Accept'), ('R', 'Reject'), ('W', 'Waiting')], default='W', max_length=2)),
                ('doc_type', models.TextField(choices=[('BO', 'Bonafied Certificate'), ('SC', 'School Leaving Certificate '), ('CH', 'Character Certificate '), ('OT', 'Others')], max_length=2)),
                ('message', models.TextField(blank=True, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('title', models.TextField(max_length=200)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('description', models.TextField()),
                ('message', models.TextField(blank=True, null=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('title', 'date'), name='event_and_date_is_unique', violation_error_message='Event with this title and date is already registerd ')],
            },
        ),
        migrations.CreateModel(
            name='LeaveRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('application', models.FileField(upload_to='application/')),
                ('message', models.TextField(blank=True, null=True)),
                ('status', models.TextField(choices=[('A', 'Accept'), ('R', 'Reject'), ('W', 'Waiting')], default='W', max_length=2)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='SchoolClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('section', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], max_length=1)),
                ('location', models.TextField()),
                ('class_teacher', models.ForeignKey(blank=True, limit_choices_to={'role': 'T'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='my_class', to=settings.AUTH_USER_MODEL)),
                ('subjects', models.ManyToManyField(related_name='class_room', to='school.subject')),
            ],
            options={
                'unique_together': {('name', 'section')},
            },
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_fee', models.FloatField()),
                ('exam_fee', models.FloatField(blank=True, null=True)),
                ('extra', models.FloatField(blank=True, null=True)),
                ('class_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structure', to='school.schoolclass')),
            ],
        ),
        migrations.AddField(
            model_name='assignment',
            name='class_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.schoolclass'),
        ),
        migrations.AddField(
            model_name='abstracttimetable',
            name='class_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.schoolclass'),
        ),
        migrations.CreateModel(
            name='AttandanceSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('class_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.schoolclass')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attandance', to='school.subject')),
            ],
            options={
                'unique_together': {('teacher', 'class_name', 'subject', 'created_at')},
            },
        ),
        migrations.AddField(
            model_name='assignment',
            name='subj',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='school.subject'),
        ),
        migrations.AddField(
            model_name='abstracttimetable',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.subject'),
        ),
        migrations.CreateModel(
            name='SubjectMarks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('total_marks', models.IntegerField(default=100)),
                ('exam', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.examination')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.subject')),
            ],
        ),
        migrations.CreateModel(
            name='ExamMarks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('acadmic_year', models.CharField(max_length=10)),
                ('obtain_marks', models.FloatField()),
                ('student_status', models.CharField(blank=True, max_length=20, null=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subject_marks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.subjectmarks')),
            ],
        ),
        migrations.CreateModel(
            name='TeachingAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('class_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='school.schoolclass')),
                ('subjects', models.ManyToManyField(related_name='subject_teachers', to='school.subject')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'T'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SubjectTimeTable',
            fields=[
                ('abstracttimetable_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='school.abstracttimetable')),
                ('teacher', models.ForeignKey(limit_choices_to={'role': 'T'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('school.abstracttimetable',),
        ),
        migrations.CreateModel(
            name='AttandanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('A', 'Absent'), ('P', 'Present')], max_length=1)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attandance_records', to=settings.AUTH_USER_MODEL)),
                ('atd_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attandance_records', to='school.attandancesession')),
            ],
            options={
                'unique_together': {('atd_session', 'student')},
            },
        ),
        migrations.CreateModel(
            name='StudentFeeRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateField(auto_now=True)),
                ('payment', models.DecimalField(decimal_places=2, max_digits=10)),
                ('month', models.CharField(choices=[('JAN', 'Jan'), ('FEB', 'Feb'), ('MAR', 'Mar'), ('APR', 'Apr'), ('MAY', 'May'), ('JUN', 'Jun'), ('AUG', 'Aug'), ('SEP', 'Sep'), ('OCT', 'Oct'), ('NOV', 'Nov'), ('DEC', 'Dec')], max_length=3)),
                ('year', models.IntegerField(blank=True)),
                ('payment_method', models.CharField(choices=[('Online', 'Online'), ('Cash', 'Cash'), ('Card', 'Card')], max_length=10)),
                ('paid', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('student', 'month'), name='student_and_month_must_unique', violation_error_message='fee already paid for this month ')],
            },
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.UniqueConstraint(fields=('title', 'teacher', 'class_name'), name='teacher_class_and_assignment_unique_together', violation_error_message='Teacher already assingned asingment to this class '),
        ),
        migrations.AlterUniqueTogether(
            name='abstracttimetable',
            unique_together={('class_name', 'weekday', 'start_time')},
        ),
        migrations.AddConstraint(
            model_name='subjectmarks',
            constraint=models.UniqueConstraint(fields=('exam', 'subject'), name='subject_name_must_unique_for_examintion', violation_error_message='This is becuase Thsi subject is already register '),
        ),
        migrations.AddConstraint(
            model_name='exammarks',
            constraint=models.UniqueConstraint(fields=('student', 'subject_marks'), name='student_and_exam_is_unique', violation_error_message='Student marks already updated with this subject'),
        ),
        migrations.AddConstraint(
            model_name='teachingassignment',
            constraint=models.UniqueConstraint(fields=('teacher', 'class_name'), name='teacher_and_class_are_unique_togethter', violation_error_message='Teacher is already assigned to the class '),
        ),
    ]
